version: 2.1

commands:
  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-prod-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-prod-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-prod-frontend-<<parameters.workflow_id>>

  undo_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            if [[ -f "~/project/.circleci/outputs/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            fi

jobs:
  build_backend:
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - run: npm i --prefix backend
      - run: npm run lint --prefix backend
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/node_modules

  build_frontend:
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - run: npm i --prefix frontend
      - run: npm run lint --prefix frontend
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/node_modules

  test_backend:
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: npm i --prefix backend
      - run: npm run test --prefix backend

  test_frontend:
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: npm i --prefix frontend
      - run: npm run test --prefix frontend

  analyze_backend:
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - run: npm audit --audit-level=critical --prefix backend

  analyze_frontend:
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - run: npm audit --audit-level=critical --prefix frontend

  deploy_backend_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the backend infrastructure using cloudformation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/cloudformation/backend_infrastructure.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-prod-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Save backend URL and IP (for ansible)
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_AWS_PUBLIC_IP >> .circleci/outputs/backend_url.txt
            echo "[all]" >> .circleci/ansible/inventory.txt
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt

            cat .circleci/outputs/backend_url.txt
            cat .circleci/ansible/inventory.txt
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/backend_url.txt
            - project/.circleci/ansible/inventory.txt
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy_frontend_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the frontend infrastructure using cloudformation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/cloudformation/frontend_infrastructure.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-prod-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run_db_migrations_for_backend:
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run DB migrations
          command: |
            pushd backend || exit
            npm run migrations >> migration_output.txt
            cat migration_output.txt
            popd || exit
      - run:
          name: Store migration result in a file.
          command: |
            pushd backend || exit
            if grep -q "has been executed successfully." migration_output.txt
            then
              touch .circleci/outputs/db_migration_success
            fi
            popd || exit
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/

  deploy_backend_artifact:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm ansible zip
            pip install awscli
      - run:
          name: Build backend app
          command: |
            cd ~/project/backend
            npm i
            npm run build
      - run:
          name: Move dist.zip to ansible/deploy_backend/files
          command: |
            mkdir -p .circleci/ansible/roles/deploy_backend/files
            cd ~/project/backend
            zip -q dist.zip dist
            mv dist.zip .circleci/ansible/roles/deploy_backend/files/
      - add_ssh_keys:
          fingerprints: [ "c8:74:5e:9c:5f:b0:d6:68:27:22:d5:1f:39:a5:a6:a5" ]
      - run:
          name: Setup EC2 instance & copy compiled backend to the EC2 instance
          command: |
            cd ~/project/backend
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/playbook.yml
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations

  package_frontend_artifact:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Package frontend app
          command: |
            export API_URL=`cat .circleci/outputs/backend_url.txt`
            cd ~/project/frontend
            npm i
            npm install typescript@rc
            npm run build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/dist
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations

  deploy_frontend_artifact:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl tar
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Copy frontend to s3 bucket.
          command: |
            cd ~/project/frontend
            aws s3 cp dist s3://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations

  smoke_test_frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Package frontend app
          command: |
            if curl -s http://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com/ | grep "Welcome"
            then
            return 1
            else
            return 0
            fi
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations

  smoke_test_backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Package frontend app
          command: |
            API_URL=`cat .circleci/outputs/backend_url.txt`
            if curl -s http://${API_URL}:3030/api/status | grep "Ok"
            then
            return 0
            else
            return 1
            fi
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations


  deploy_cloudfront_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Save previous bucket id suffix
          command: |
            PREVIOUS_BUCKET_ID_SUFFIX=$(aws cloudformation \
                          list-exports --query "Exports[?Name==\`BucketIdSuffix\`].Value" \
                          --no-paginate --output text)

            echo "$PREVIOUS_BUCKET_ID_SUFFIX" >> .circleci/outputs/previous_bucket_id_suffix.txt

            cat .circleci/outputs/previous_bucket_id_suffix.txt
      - run:
          name: Deploy the backend infrastructure using cloudformation
          command: |
            OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`UdapeopleWorkflowID\`].Value" \
              --no-paginate --output text)

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            aws cloudformation deploy \
              --template-file .circleci/cloudformation/cloudfront_infrastructure.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-prod-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}

            if [[ "${STACKS[@]}" =~ "${OLD_WORKFLOW_ID}" ]]
            then
              aws s3 rm "s3://udapeople-prod-${OLD_WORKFLOW_ID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-prod-backend-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-prod-frontend-${OLD_WORKFLOW_ID}"
            fi
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations

workflows:
  my_workflow:
    jobs:
      - build_backend
      - build_frontend
      - test_backend:
          requires:
            - build_backend
      - test_frontend:
          requires:
            - build_frontend
      - analyze_backend:
          requires:
            - test_backend
      - analyze_frontend:
          requires:
            - test_frontend
      - deploy_backend_infrastructure:
          requires:
            - analyze_backend
            - analyze_frontend
          filters:
            branches:
              only: [ master ]
      - deploy_frontend_infrastructure:
          requires:
            - analyze_backend
            - analyze_frontend
          filters:
            branches:
              only: [ master ]
      - run_db_migrations_for_backend:
          requires:
            - deploy_backend_infrastructure
      - deploy_backend_artifact:
          requires:
            - run_db_migrations_for_backend
      - package_frontend_artifact:
          requires:
            - deploy_frontend_infrastructure
            - run_db_migrations_for_backend
      - deploy_frontend_artifact:
          requires:
            - package_frontend_artifact
      - smoke_test_backend:
          requires:
            - deploy_backend_artifact
      - smoke_test_frontend:
          requires:
            - deploy_frontend_artifact
      - deploy_cloudfront_infrastructure:
          requires:
            - smoke_test_backend
            - smoke_test_frontend
